require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BillsController do

  # This should return the minimal set of attributes required to create a valid
  # Bill. As you add validations to Bill, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {  }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BillsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before :each do
    response = '[{
      "uid":"5330377bd0c05d8b737b6de0",
      "name":"Roberto Poblete Zapata"}]'
      stub_request(:get, /.*morph.io*/)
        .to_return(:body => response)
    mock_bill
  end


  describe "GET index" do
    it "assigns all bills as @bills" do
      response = get :index, {:locale => 'es'}, valid_session
      response.should redirect_to :controller => :bills, :action => :searches

    end
  end

  describe "GET show" do
    it "assigns the requested bill as @bill" do
      bill = Billit::Bill.get(ENV['billit_url'] + "6967-06.json", 'application/json')
      # bill = Bill.create! valid_attributes
      get :show, {:id => bill.uid, :locale => 'es'}, valid_session
      assigns(:bill).uid.should eq(bill.uid)
      assigns(:bill).title.should eq(bill.title)
      assigns(:bill).creation_date.should eq(bill.creation_date)
      assigns(:bill).source.should eq(bill.source)
      assigns(:bill).initial_chamber.should eq(bill.initial_chamber)
      assigns(:bill).current_priority.should eq(bill.current_priority)
      assigns(:bill).stage.should eq(bill.stage)
      assigns(:bill).sub_stage.should eq(bill.sub_stage)
      assigns(:bill).status.should eq(bill.status)
      assigns(:bill).resulting_document.should eq(bill.resulting_document)
      
      assigns(:bill).merged_bills.should eq(bill.merged_bills)
      assigns(:bill).subject_areas.should eq(bill.subject_areas)
      assigns(:bill).authors.should eq(bill.authors)
      assigns(:bill).priorities.should eq(bill.priorities)
      assigns(:bill).reports.should eq(bill.reports)
      assigns(:bill).revisions.should eq(bill.revisions)
      assigns(:bill).documents.should eq(bill.documents)
      assigns(:bill).directives.should eq(bill.directives)
      assigns(:bill).remarks.should eq(bill.remarks)
      assigns(:bill).links.should eq(bill.links)
      assigns(:bill).law_web_link.should eq(bill.law_web_link)
      controller_sessions = assigns(:bill).paperworks.map {|paperwork| paperwork.session}
      bill.paperworks.each do |paperwork| 
        controller_sessions.include?(paperwork.session).should be_true
      end

    end

    it "returns @date_freq as an array of integers" do
      bill = Billit::Bill.get(ENV['billit_url'] + "6967-06.json", 'application/json')
      # bill = Bill.create! valid_attributes
      get :show, {:id => bill.uid, :locale => 'es'}, valid_session
      assigns(:date_freq).should be_an_instance_of Array
      assigns(:date_freq).length.should be ENV['bill_graph_data_length'].to_i
      assigns(:date_freq).each do |freq|
        freq.should be_an Integer
      end
    end

    it "assigns @date_freq values according to defined time intervals" do
      bill = Billit::Bill.get(ENV['billit_url'] + "6967-06.json", 'application/json')
      Date.stub(:today) {Date.new(2013, 4)}
      response = get :show, {:id => bill.uid, :locale => 'es'}, valid_session
      assigns(:date_freq).should eq [1,0,0,0,0,0,0,0,0,4,0,0]
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested bill" do
        mock_put()
        put :update, {id: "6967-06", tags: ["ola", "chao"], locale: 'es'}, valid_session

        
        assigns(:bill).tags.should eq(["ola", "chao"])
      end 

      xit "assigns the requested bill as @bill" do
        bill = Billit::Bill.create! valid_attributes
        put :update, {:id => bill.to_param, :bill => valid_attributes}, valid_session
        assigns(:bill).should eq(bill)
      end

      xit "redirects to the bill" do
        bill = Billit::Bill.create! valid_attributes
        put :update, {:id => bill.to_param, :bill => valid_attributes}, valid_session
        response.should redirect_to(bill)
      end
    end

    describe "with invalid params" do
      xit "assigns the bill as @bill" do
        bill = Billit::Bill.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Billit::Bill.any_instance.stub(:save).and_return(false)
        put :update, {:id => bill.to_param, :bill => {  }}, valid_session
        assigns(:bill).should eq(bill)
      end

      xit "re-renders the 'edit' template" do
        bill = Billit::Bill.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Billit::Bill.any_instance.stub(:save).and_return(false)
        put :update, {:id => bill.to_param, :bill => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end

end
